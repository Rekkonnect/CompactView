/**************************************************************************
Copyright (C) 2023 Rekkonnect

This file is part of CompactView.

CompactView is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

CompactView is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with CompactView.  If not, see <http://www.gnu.org/licenses/>.

CompactView web site <http://sourceforge.net/p/compactview/>.
**************************************************************************/

using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Data;
using System.Data.SqlServerCe;

namespace CompactView
{
    using static InformationSchema;

    public class SqlCeInformationSchemaData
    {
        public ReadOnlyCollection<Table> Tables { get; private set; }
        public ReadOnlyCollection<Index> Indexes { get; private set; }
        public ReadOnlyCollection<Column> Columns { get; private set; }
        public ReadOnlyCollection<KeyColumnUsage> KeyColumnUsages { get; private set; }
        public ReadOnlyCollection<TableConstraint> TableConstraints { get; private set; }
        public ReadOnlyCollection<ReferentialConstraint> ReferentialConstraints { get; private set; }

        public SqlCeConnection Connection { get; set; }

        public SqlCeInformationSchemaData(SqlCeConnection connection)
        {
            Connection = connection;
        }

        public void LoadAll()
        {
            Tables = GetTables().AsReadOnly();
            Columns = GetColumns().AsReadOnly();
            Indexes = GetIndexes().AsReadOnly();
            KeyColumnUsages = GetKeyColumnUsages().AsReadOnly();
            TableConstraints = GetTableConstraints().AsReadOnly();
            ReferentialConstraints = GetReferentialConstraints().AsReadOnly();
        }

        // Happily generated by ChatGPT with few modifications
        public List<Column> GetColumns()
        {
            var result = new List<Column>();

            using (var command = Connection.CreateCommand())
            {
                const string query = @"
SELECT
    TABLE_NAME,
    COLUMN_NAME,
    COLUMN_HASDEFAULT,
    COLUMN_DEFAULT,
    ORDINAL_POSITION,
    IS_NULLABLE,
    DATA_TYPE,
    CHARACTER_MAXIMUM_LENGTH,
    NUMERIC_PRECISION,
    NUMERIC_SCALE,
    AUTOINC_SEED,
    AUTOINC_INCREMENT
FROM INFORMATION_SCHEMA.COLUMNS";

                command.CommandText = query;
                command.CommandType = CommandType.Text;

                using (var reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        var column = new Column
                        {
                            TableName = reader.GetString(0),
                            ColumnName = reader.GetString(1),
                            HasDefaultValue = reader.GetBoolean(2),
                            DefaultValue = reader.GetNullableString(3),
                            OrdinalPosition = reader.GetInt32(4),
                            IsNullableName = reader.GetString(5),
                            DataType = reader.GetString(6),
                            CharacterMaximumLength = reader.GetNullableInt32(7),
                            NumericPrecision = reader.UpcastInt16NullableInt32(8),
                            NumericScale = reader.UpcastInt16NullableInt32(9),
                            AutoIncrementSeed = reader.GetNullableInt64(10),
                            AutoIncrementBy = reader.GetNullableInt64(11),
                        };

                        result.Add(column);
                    }
                }
            }

            return result;
        }
        public List<Index> GetIndexes()
        {
            var result = new List<Index>();

            using (var command = Connection.CreateCommand())
            {
                const string query = @"
SELECT
    INDEX_NAME,
    TABLE_NAME,
    COLUMN_NAME,
    PRIMARY_KEY,
    [UNIQUE],
    [CLUSTERED],
    ORDINAL_POSITION,
    [COLLATION]
FROM INFORMATION_SCHEMA.INDEXES";

                command.CommandText = query;
                command.CommandType = CommandType.Text;

                using (var reader = command.ExecuteReader())
                {
                    // Get the ordinal positions
                    var indexNameOrdinal = reader.GetOrdinal("INDEX_NAME");
                    var tableNameOrdinal = reader.GetOrdinal("TABLE_NAME");
                    var columnNameOrdinal = reader.GetOrdinal("COLUMN_NAME");
                    var primaryKeyOrdinal = reader.GetOrdinal("PRIMARY_KEY");
                    var uniqueOrdinal = reader.GetOrdinal("UNIQUE");
                    var clusteredOrdinal = reader.GetOrdinal("CLUSTERED");
                    var ordinalPositionOrdinal = reader.GetOrdinal("ORDINAL_POSITION");
                    var collationOrdinal = reader.GetOrdinal("COLLATION");

                    while (reader.Read())
                    {
                        var index = new Index
                        {
                            IndexName = reader.GetString(indexNameOrdinal),
                            TableName = reader.GetString(tableNameOrdinal),
                            ColumnName = reader.GetString(columnNameOrdinal),
                            PrimaryKey = reader.GetBoolean(primaryKeyOrdinal),
                            Unique = reader.GetBoolean(uniqueOrdinal),
                            Clustered = reader.GetBoolean(clusteredOrdinal),
                            OrdinalPosition = reader.GetInt32(ordinalPositionOrdinal),
                            Collation = reader.GetInt16(collationOrdinal)
                        };

                        result.Add(index);
                    }
                }
            }

            return result;
        }
        public List<KeyColumnUsage> GetKeyColumnUsages()
        {
            const string query = @"
SELECT
    CONSTRAINT_NAME,
    TABLE_NAME,
    COLUMN_NAME,
    ORDINAL_POSITION
FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE";

            var result = new List<KeyColumnUsage>();

            using (var command = Connection.CreateCommand())
            {
                command.CommandText = query;
                command.CommandType = CommandType.Text;

                using (var reader = command.ExecuteReader())
                {
                    var constraintNameOrdinal = reader.GetOrdinal("CONSTRAINT_NAME");
                    var tableNameOrdinal = reader.GetOrdinal("TABLE_NAME");
                    var columnNameOrdinal = reader.GetOrdinal("COLUMN_NAME");
                    var ordinalPositionOrdinal = reader.GetOrdinal("ORDINAL_POSITION");

                    while (reader.Read())
                    {
                        var keyColumnUsage = new KeyColumnUsage
                        {
                            ConstraintName = reader.GetString(constraintNameOrdinal),
                            TableName = reader.GetString(tableNameOrdinal),
                            ColumnName = reader.GetString(columnNameOrdinal),
                            OrdinalPosition = reader.GetInt32(ordinalPositionOrdinal)
                        };

                        result.Add(keyColumnUsage);
                    }
                }
            }

            return result;
        }

        // Manual mapping method for ReferentialConstraint entity
        public List<ReferentialConstraint> GetReferentialConstraints()
        {
            const string query = @"
SELECT
    CONSTRAINT_TABLE_NAME,
    CONSTRAINT_NAME,
    UNIQUE_CONSTRAINT_TABLE_NAME,
    UNIQUE_CONSTRAINT_NAME,
    UPDATE_RULE,
    DELETE_RULE
FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS";

            var result = new List<ReferentialConstraint>();

            using (var command = Connection.CreateCommand())
            {
                command.CommandText = query;
                command.CommandType = CommandType.Text;

                using (var reader = command.ExecuteReader())
                {
                    var constraintTableNameOrdinal = reader.GetOrdinal("CONSTRAINT_TABLE_NAME");
                    var constraintNameOrdinal = reader.GetOrdinal("CONSTRAINT_NAME");
                    var uniqueConstraintTableNameOrdinal = reader.GetOrdinal("UNIQUE_CONSTRAINT_TABLE_NAME");
                    var uniqueConstraintNameOrdinal = reader.GetOrdinal("UNIQUE_CONSTRAINT_NAME");
                    var updateRuleNameOrdinal = reader.GetOrdinal("UPDATE_RULE");
                    var deleteRuleNameOrdinal = reader.GetOrdinal("DELETE_RULE");

                    while (reader.Read())
                    {
                        var referentialConstraint = new ReferentialConstraint
                        {
                            ConstraintTableName = reader.GetString(constraintTableNameOrdinal),
                            ConstraintName = reader.GetString(constraintNameOrdinal),
                            UniqueConstraintTableName = reader.GetString(uniqueConstraintTableNameOrdinal),
                            UniqueConstraintName = reader.GetString(uniqueConstraintNameOrdinal),
                            UpdateRuleName = reader.GetString(updateRuleNameOrdinal),
                            DeleteRuleName = reader.GetString(deleteRuleNameOrdinal)
                        };

                        result.Add(referentialConstraint);
                    }
                }
            }

            return result;
        }
        public List<Table> GetTables()
        {
            const string query = @"
SELECT
    TABLE_NAME
FROM INFORMATION_SCHEMA.TABLES";

            var result = new List<Table>();

            using (var command = Connection.CreateCommand())
            {
                command.CommandText = query;
                command.CommandType = CommandType.Text;

                using (var reader = command.ExecuteReader())
                {
                    var tableNameOrdinal = reader.GetOrdinal("TABLE_NAME");

                    while (reader.Read())
                    {
                        var table = new Table
                        {
                            TableName = reader.GetString(tableNameOrdinal)
                        };

                        result.Add(table);
                    }
                }
            }

            return result;
        }

        // Manual mapping method for TableConstraint entity
        public List<TableConstraint> GetTableConstraints()
        {
            const string query = @"
SELECT
    CONSTRAINT_NAME,
    TABLE_NAME,
    CONSTRAINT_TYPE,
    IS_DEFERRABLE,
    INITIALLY_DEFERRED,
    DESCRIPTION
FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS";

            var result = new List<TableConstraint>();

            using (var command = Connection.CreateCommand())
            {
                command.CommandText = query;
                command.CommandType = CommandType.Text;

                using (var reader = command.ExecuteReader())
                {
                    var constraintNameOrdinal = reader.GetOrdinal("CONSTRAINT_NAME");
                    var tableNameOrdinal = reader.GetOrdinal("TABLE_NAME");
                    var constraintTypeOrdinal = reader.GetOrdinal("CONSTRAINT_TYPE");
                    var isDeferrableOrdinal = reader.GetOrdinal("IS_DEFERRABLE");
                    var initiallyDeferredOrdinal = reader.GetOrdinal("INITIALLY_DEFERRED");
                    var descriptionOrdinal = reader.GetOrdinal("DESCRIPTION");

                    while (reader.Read())
                    {
                        var tableConstraint = new TableConstraint
                        {
                            ConstraintName = reader.GetString(constraintNameOrdinal),
                            TableName = reader.GetString(tableNameOrdinal),
                            ConstraintTypeName = reader.GetString(constraintTypeOrdinal),
                            IsDeferrable = reader.GetBoolean(isDeferrableOrdinal),
                            InitiallyDeferred = reader.GetBoolean(initiallyDeferredOrdinal),
                            Description = reader.GetNullableString(descriptionOrdinal)
                        };

                        result.Add(tableConstraint);
                    }
                }
            }

            return result;
        }
    }
}
